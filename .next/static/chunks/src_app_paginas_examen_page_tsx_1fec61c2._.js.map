{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/luizpedro/Documentos/Web2/WebProyecto/src/app/paginas/examen/page.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { FaArrowLeft } from 'react-icons/fa';\n\ninterface Option {\n  id: number;\n  texto: string;\n  esCorrecta: number; // 0 o 1\n}\n\ninterface Question {\n  id: number;\n  materia: string;\n  tipo: 'opcion' | 'abierta';\n  pregunta: string;\n  opciones?: Option[];\n}\n\nexport default function ExamenPage() {\n  const router = useRouter();\n  const subjects = [\n    { displayName: 'Base de Datos', dbName: 'bd' },\n    { displayName: 'Programación Web', dbName: 'web' },\n    { displayName: 'Sistemas Operativos', dbName: 'so' }\n  ];\n\n  const [questionsBySubject, setQuestionsBySubject] = useState<{ [key: string]: Question[] }>({});\n  const [loadingSubject, setLoadingSubject] = useState<string | null>(null);\n  const [userAnswers, setUserAnswers] = useState<{ [questionId: number]: string | string[] }>({});\n  const [examResults, setExamResults] = useState<{ [subjectDisplayName: string]: string | null }>({}); // Para almacenar y mostrar la calificación\n\n  // Asumiendo un ID de alumno (esto debería venir de tu autenticación/sesión)\n  const alumnoId = 123; // ¡Cambia esto por el ID real del alumno logueado!\n  const [username, setUsername] = useState<string | null>(null);\n   const storedUsername = localStorage.getItem('username');\n  useEffect(() => {\n    // Se ejecuta solo en el cliente\n   \n\n    if (storedUsername) {\n      setUsername(storedUsername);\n    } else {\n      // Si no hay datos, redirige al login\n      router.push('/login');\n    }\n  }, [router]);\n\n  const generarExamenPorMateria = async (subject: { displayName: string; dbName: string }) => {\n    setLoadingSubject(subject.displayName);\n    try {\n      const res = await fetch(`/apilocal/cuestionarios?materia=${encodeURIComponent(subject.dbName)}`);\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({ message: 'Error desconocido' }));\n        throw new Error(errorData.message || `Error ${res.status}: ${res.statusText}`);\n      }\n      const data: Question[] = await res.json();\n      setQuestionsBySubject((prev) => ({ ...prev, [subject.displayName]: data }));\n      // Limpiar respuestas anteriores y resultados para esta materia si se regenera\n      setUserAnswers((prev) => {\n        const newAnswers = { ...prev };\n        data.forEach(q => delete newAnswers[q.id]);\n        return newAnswers;\n      });\n      setExamResults((prev) => ({ ...prev, [subject.displayName]: null })); // Limpiar resultado anterior\n    } catch (error) {\n      console.error('Error al generar examen:', error);\n      alert(`Error al generar examen de ${subject.displayName}: ${(error as Error).message}`);\n    } finally {\n      setLoadingSubject(null);\n    }\n  };\n\n  const handleAnswerChange = (questionId: number, tipo: 'opcion' | 'abierta', value: string) => {\n    setUserAnswers((prev) => {\n      if (tipo === 'opcion' || tipo === 'abierta') {\n        return { ...prev, [questionId]: value };\n      }\n      return prev;\n    });\n  };\n\n  const enviarExamen = async (subjectDisplayName: string, subjectDbName: string) => {\n    const questions = questionsBySubject[subjectDisplayName];\n    if (!questions || questions.length === 0) {\n      alert('No hay preguntas para enviar en este examen.');\n      return;\n    }\n\n    const examData = {\n      id_alumno: alumnoId,\n      materia: subjectDbName,\n      // --- CAMBIO CLAVE AQUÍ: ENVIAR LA PREGUNTA ORIGINAL COMPLETA ---\n      respuestas_enviadas: questions.map(q => ({\n        id_pregunta: q.id,\n        tipo: q.tipo,\n        pregunta_original: q, // <-- ¡Envía la pregunta original completa!\n        respuesta_usuario: userAnswers[q.id] || null\n      })),\n      // No enviamos calificacion_obtenida, el backend la calculará\n    };\n\n    console.log('Datos a enviar para calificación:', examData);\n\n    try {\n      const res = await fetch('/apilocal/resultados', { // Asegúrate que esta URL apunta a tu API POST de resultados\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(examData),\n      });\n\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({ message: 'Error desconocido' }));\n        throw new Error(errorData.message || `Error ${res.status}: ${res.statusText}`);\n      }\n\n      const result = await res.json();\n      const finalScore = result.calificacionFinal; // Obtenemos la calificación sobre 10 del backend\n      \n      alert(`Examen de ${subjectDisplayName} enviado con éxito. Calificación: ${finalScore}/10`);\n      console.log('Resultado del envío:', result);\n\n      setExamResults((prev) => ({ ...prev, [subjectDisplayName]: finalScore })); // Guarda la calificación para mostrarla\n      \n      // Opcional: limpiar las preguntas y respuestas después del envío si no quieres que se puedan revisar\n      setQuestionsBySubject((prev) => {\n        const newState = { ...prev };\n        delete newState[subjectDisplayName];\n        return newState;\n      });\n      setUserAnswers((prev) => {\n        const newState = { ...prev };\n        questions.forEach(q => delete newState[q.id]);\n        return newState;\n      });\n\n    } catch (error) {\n      console.error('Error al enviar examen:', error);\n      alert(`Error al enviar examen de ${subjectDisplayName}: ${(error as Error).message}`);\n    }\n  };\n\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-black text-teal-300 font-mono px-6 py-6\">\n      <nav className=\"flex justify-between items-center border-b border-teal-500/30 pb-4 mb-6\">\n        <h1 className=\"text-2xl font-bold\">Examen</h1>\n        <Link href=\"/paginas/alumno\" className=\"flex items-center gap-2 text-teal-300 hover:text-teal-100 transition hover:underline\">\n          <FaArrowLeft className=\"text-xl\" /> Regresar\n        </Link>\n      </nav>\n\n      <div className=\"space-y-6 max-w-3xl mx-auto w-full\">\n        {subjects.map((subject) => (\n          <div key={subject.displayName} className=\"bg-neutral-900 p-4 rounded-xl border border-teal-500/30\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <p className=\"text-lg font-semibold\">{subject.displayName}</p>\n              {/* Mostrar el botón \"Generar examen\" SOLO SI no hay preguntas cargadas Y no hay un resultado mostrado */}\n              {!questionsBySubject[subject.displayName] && !examResults[subject.displayName] && (\n                <button\n                  onClick={() => generarExamenPorMateria(subject)}\n                  disabled={loadingSubject === subject.displayName}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white py-1 px-4 rounded transition ml-6\"\n                >\n                  {loadingSubject === subject.displayName ? 'Generando...' : 'Generar examen'}\n                </button>\n              )}\n              {/* Mostrar calificación si ya se envió el examen */}\n              {examResults[subject.displayName] && (\n                <p className=\"text-xl font-bold text-teal-400\">Calificación: {examResults[subject.displayName]}/10</p>\n              )}\n            </div>\n\n            {/* Mostrar preguntas y botón de enviar SOLO SI hay preguntas cargadas */}\n            {questionsBySubject[subject.displayName] && (\n              <form className=\"space-y-4\">\n                {questionsBySubject[subject.displayName].map((q) => (\n                  <div key={q.id} className=\"border-t border-teal-500/10 pt-4 mt-4 first:mt-0 first:pt-0 first:border-t-0\">\n                    <p className=\"font-medium text-lg mb-2\">{q.pregunta}</p>\n                    {q.tipo === 'opcion' && q.opciones && q.opciones.length > 0 && (\n                      <div className=\"space-y-1\">\n                        {q.opciones.map((opt) => (\n                          <label key={opt.id} className=\"flex items-center gap-2 text-base\">\n                            <input\n                              type=\"radio\"\n                              name={`q-${q.id}`}\n                              value={opt.texto}\n                              onChange={(e) => handleAnswerChange(q.id, q.tipo, e.target.value)}\n                              checked={userAnswers[q.id] === opt.texto}\n                              className=\"accent-teal-400 w-4 h-4\"\n                            />\n                            <span>{opt.texto}</span>\n                          </label>\n                        ))}\n                      </div>\n                    )}\n                    {q.tipo === 'abierta' && (\n                      <textarea\n                        name={`q-${q.id}`}\n                        rows={3}\n                        placeholder=\"Escribe tu respuesta aquí...\"\n                        value={(userAnswers[q.id] as string) || ''}\n                        onChange={(e) => handleAnswerChange(q.id, q.tipo, e.target.value)}\n                        className=\"w-full p-2 bg-black border border-teal-500/30 rounded mt-2 text-teal-100 placeholder-teal-600 focus:ring focus:ring-teal-400 focus:border-teal-400 outline-none\"\n                      />\n                    )}\n                  </div>\n                ))}\n                <button\n                  type=\"button\"\n                  onClick={() => enviarExamen(subject.displayName, subject.dbName)} // Asegúrate de pasar subject.dbName\n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition mt-6\"\n                >\n                  Enviar Examen\n                </button>\n              </form>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}