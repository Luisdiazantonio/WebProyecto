{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/luizpedro/Documentos/Web2/WebProyecto/src/app/apilocal/resultados/route.ts"],"sourcesContent":["// app/apilocal/resultados/route.ts\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI, HarmBlockThreshold, HarmCategory } from '@google/generative-ai';\n\n// NOTA: 'pool' ya no es necesario si no se interactúa con la base de datos en este archivo.\n// Si aún lo necesitas para otras partes de tu aplicación que no están en este archivo,\n// puedes mantener la importación, pero no se usará aquí.\n// import pool from '@/app/database';\n\n\n// Carga la clave API desde las variables de entorno\nconst API_KEY = process.env.GOOGLE_API_KEY;\n\n// Inicializa el cliente de Gemini\nconst genAI = new GoogleGenerativeAI(API_KEY || '');\n\n// Se configura el modelo con safetySettings AQUÍ, en getGenerativeModel\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-1.5-flash\", // Usamos gemini-1.5-flash como el modelo actual recomendado\n  safetySettings: [\n    { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },\n    { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_NONE },\n    { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },\n    { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_NONE },\n  ],\n});\n\n\nexport async function POST(request: Request) {\n  let finalScoreOutOf10 = 0; // Variable para almacenar la calificación final\n  let gradedResponses = []; // Variable para almacenar las respuestas calificadas\n\n  try {\n    const body = await request.json();\n    const { id_alumno, materia, respuestas_enviadas } = body;\n\n    console.log('--- Calificación de Examen Iniciada ---');\n    console.log('Datos de examen recibidos:', {\n      id_alumno,\n      materia,\n      num_respuestas: respuestas_enviadas.length\n    });\n\n    if (!id_alumno || !materia || !Array.isArray(respuestas_enviadas)) {\n      console.error('Error: Faltan datos obligatorios para calificar el examen.');\n      return NextResponse.json({ error: 'Faltan datos obligatorios para calificar el examen' }, { status: 400 });\n    }\n\n    const materiasPermitidas = ['bd', 'web', 'so'];\n    if (!materiasPermitidas.includes(materia)) {\n      console.error('Error: Materia no válida para calificar.');\n      return NextResponse.json({ error: 'Materia no válida para calificar' }, { status: 400 });\n    }\n\n    let score = 0;\n    const totalQuestions = respuestas_enviadas.length;\n\n    // NOTA: Ya no necesitamos consultar la base de datos para opciones correctas\n    // porque el frontend ahora envía la 'pregunta_original' completa,\n    // que incluye las opciones y cuál es la correcta.\n\n    // --- Lógica de Calificación pregunta por pregunta ---\n    for (const r of respuestas_enviadas) {\n      let isCorrect: boolean | null = false;\n      let feedback = '';\n      let questionScore = 0;\n\n      if (r.tipo === 'opcion') {\n        const originalQuestion = r.pregunta_original;\n\n        if (originalQuestion && originalQuestion.opciones && Array.isArray(originalQuestion.opciones)) {\n            const correctOption = originalQuestion.opciones.find((opt: any) => opt.esCorrecta === 1);\n\n            if (correctOption && r.respuesta_usuario === correctOption.texto) {\n                isCorrect = true;\n                feedback = 'Correcta';\n                questionScore = 1;\n            } else {\n                isCorrect = false;\n                feedback = `Incorrecta. La respuesta correcta era: ${correctOption?.texto || 'N/A'}`;\n            }\n        } else {\n            // Caso de fallback si la pregunta original no tiene opciones correctamente estructuradas\n            // Esto no debería ocurrir si el frontend siempre envía la estructura completa\n            console.warn(`Advertencia: Pregunta de opción múltiple (ID: ${r.id_pregunta}) sin opciones originales válidas.`);\n            isCorrect = null;\n            feedback = 'Información de opciones original no disponible. Calificación manual requerida.';\n        }\n\n      } else if (r.tipo === 'abierta') {\n        // --- Calificación de Preguntas Abiertas con IA ---\n        const userResponse = r.respuesta_usuario as string;\n        const originalQuestionText = r.pregunta_original.pregunta;\n\n        if (userResponse && userResponse.trim() !== '' && originalQuestionText) {\n          try {\n            const aiPrompt = `Califica la siguiente respuesta a una pregunta abierta en una escala del 0 al 1.0 (siendo 1.0 perfecto). No respondas con texto, solo con el número decimal.\n            Pregunta: \"${originalQuestionText}\"\n            Respuesta del alumno: \"${userResponse}\"\n            Dame retroalimentación breve (1-2 frases) sobre por qué se le dio esa calificación.\n            \n            Formato de salida JSON:\n            {\n              \"calificacion\": 0.X,\n              \"feedback\": \"Tu respuesta es...\"\n            }`;\n\n            console.log(`[IA] Enviando a IA para calificar pregunta abierta (ID: ${r.id_pregunta}):`, aiPrompt.substring(0, 150) + '...');\n            const aiResult = await model.generateContent(aiPrompt);\n            const aiResponse = await aiResult.response;\n            const aiText = aiResponse.text();\n            console.log(`[IA] Respuesta cruda de IA para pregunta (ID: ${r.id_pregunta}):`, aiText);\n\n            const jsonMatch = aiText.match(/```json\\n([\\s\\S]*?)\\n```/);\n            let parsedAiResponse: { calificacion: number; feedback: string } | null = null;\n            if (jsonMatch && jsonMatch[1]) {\n                parsedAiResponse = JSON.parse(jsonMatch[1]);\n            } else {\n                parsedAiResponse = JSON.parse(aiText);\n            }\n\n            if (parsedAiResponse && typeof parsedAiResponse.calificacion === 'number' && typeof parsedAiResponse.feedback === 'string') {\n              questionScore = parsedAiResponse.calificacion;\n              feedback = parsedAiResponse.feedback;\n              isCorrect = questionScore >= 0.5; // Considerar \"correcta\" si la IA da 0.5 o más\n              console.log(`[IA] Pregunta (ID: ${r.id_pregunta}) Calificada por IA: ${questionScore.toFixed(2)}, Feedback: \"${feedback}\"`);\n            } else {\n              console.warn(`[IA] Advertencia: La IA no devolvió el formato esperado para la calificación de pregunta abierta (ID: ${r.id_pregunta}).`);\n              isCorrect = null;\n              feedback = 'Calificación IA no disponible o formato incorrecto. Requiere revisión manual.';\n            }\n\n          } catch (aiGradingError: any) {\n            console.error(`[IA] Error al calificar pregunta abierta con IA (ID: ${r.id_pregunta}):`, aiGradingError.message);\n            isCorrect = null;\n            feedback = 'Error en la calificación por IA. Requiere revisión manual.';\n          }\n        } else {\n          isCorrect = false;\n          feedback = 'Respuesta vacía o pregunta original no disponible.';\n          console.log(`[IA] Pregunta (ID: ${r.id_pregunta}) no calificada por IA: Respuesta vacía o pregunta original no disponible.`);\n        }\n      } else {\n        isCorrect = null;\n        feedback = 'Tipo de pregunta desconocido.';\n      }\n\n      // Suma el puntaje de la pregunta a la calificación total del examen\n      score += questionScore;\n\n      gradedResponses.push({\n        id_pregunta: r.id_pregunta,\n        tipo: r.tipo,\n        pregunta: r.pregunta_original.pregunta, // Solo el texto de la pregunta para el log\n        respuesta_usuario: r.respuesta_usuario,\n        esCorrecta: isCorrect,\n        feedback: feedback,\n        puntaje_pregunta: questionScore\n      });\n    }\n\n    // Calcular la calificación final sobre 10\n    finalScoreOutOf10 = (totalQuestions > 0) ? (score / totalQuestions) * 10 : 0;\n    const finalScorePercentage = (totalQuestions > 0) ? (score / totalQuestions) * 100 : 0;\n\n    // --- Mostrar la calificación final y las respuestas calificadas en la consola ---\n    console.log('\\n--- Resumen de Calificación del Examen ---');\n    console.log(`ID Alumno: ${id_alumno}`);\n    console.log(`Materia: ${materia}`);\n    console.log(`Total de preguntas: ${totalQuestions}`);\n    console.log(`Puntaje bruto obtenido (suma de puntajes individuales): ${score.toFixed(2)}`);\n    console.log(`Calificación Final (sobre 10): ${finalScoreOutOf10.toFixed(2)}`);\n    console.log(`Calificación Final (porcentaje): ${finalScorePercentage.toFixed(2)}%`);\n    console.log('Detalle de respuestas calificadas:');\n    gradedResponses.forEach((res, index) => {\n        console.log(`  ${index + 1}. Pregunta ID: ${res.id_pregunta}`);\n        console.log(`     Tipo: ${res.tipo}`);\n        console.log(`     Pregunta: \"${res.pregunta.substring(0, 50)}...\"`);\n        console.log(`     Respuesta Usuario: \"${String(res.respuesta_usuario).substring(0, 50)}...\"`);\n        console.log(`     ¿Es Correcta?: ${res.esCorrecta === true ? 'Sí' : res.esCorrecta === false ? 'No' : 'Revisar'}`);\n        console.log(`     Puntaje Pregunta: ${res.puntaje_pregunta.toFixed(2)}`);\n        console.log(`     Feedback: \"${res.feedback}\"`);\n    });\n    console.log('--- Fin de Calificación de Examen ---');\n\n    // Devolver la calificación final al frontend\n    return NextResponse.json(\n      {\n        message: 'Examen calificado exitosamente (resultados no guardados en DB)',\n        calificacionFinal: finalScoreOutOf10.toFixed(2), // Calificación sobre 10\n        calificacionPorcentaje: finalScorePercentage.toFixed(2), // Calificación en porcentaje para info\n        respuestasCalificadas: gradedResponses // Opcional: devolver las respuestas calificadas para depuración en el frontend\n      },\n      { status: 200 }\n    );\n  } catch (error: any) {\n    console.error('Error FATAL en el proceso de calificación:', error);\n    return NextResponse.json(\n      { error: 'Error interno del servidor al calificar resultados', details: error.message },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}