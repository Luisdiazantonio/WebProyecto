{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/luizpedro/Documentos/Web2/WebProyecto/src/app/database.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\n\nconst pool = mysql.createPool({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  port: parseInt(process.env.DB_PORT || '3306'),\n  waitForConnections: true,\n  connectionLimit: 10\n});\n\nconsole.log('DB_HOST:', process.env.DB_HOST);\nconsole.log('DB_USER:', process.env.DB_USER);\nconsole.log('DB_PASSWORD:', process.env.DB_PASSWORD);\nconsole.log('DB_NAME:', process.env.DB_NAME);\n\n\nexport default pool;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI;IACtC,oBAAoB;IACpB,iBAAiB;AACnB;AAEA,QAAQ,GAAG,CAAC,YAAY,QAAQ,GAAG,CAAC,OAAO;AAC3C,QAAQ,GAAG,CAAC,YAAY,QAAQ,GAAG,CAAC,OAAO;AAC3C,QAAQ,GAAG,CAAC,gBAAgB,QAAQ,GAAG,CAAC,WAAW;AACnD,QAAQ,GAAG,CAAC,YAAY,QAAQ,GAAG,CAAC,OAAO;uCAG5B","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///home/luizpedro/Documentos/Web2/WebProyecto/src/app/apilocal/cuestionarios/route.ts"],"sourcesContent":["// app/apilocal/cuestionarios/route.ts\nimport pool from '@/app/database';\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI, HarmBlockThreshold, HarmCategory } from '@google/generative-ai';\n\n// Carga la clave API desde las variables de entorno\nconst API_KEY = process.env.GOOGLE_API_KEY;\n\n// Inicializa el cliente de Gemini\nconst genAI = new GoogleGenerativeAI(API_KEY || '');\n\nexport async function GET(request: Request) {\n  try {\n    const url = new URL(request.url);\n    const materia = url.searchParams.get('materia');\n\n    console.log(\"Materia solicitada: %s\", materia);\n\n    if (!materia) {\n      return NextResponse.json({ error: 'Falta especificar la materia' }, { status: 400 });\n    }\n\n    const materiasPermitidas = ['bd', 'web', 'so'];\n    if (!materiasPermitidas.includes(materia)) {\n      return NextResponse.json({ error: 'Materia no válida' }, { status: 400 });\n    }\n\n    // --- 1. Obtener preguntas de la base de datos (tus 8 preguntas existentes) ---\n    const [preguntasDB]: any = await pool.query(\n      'SELECT id, materia, tipo, pregunta FROM preguntas WHERE materia = ? ORDER BY RAND() LIMIT 8',\n      [materia]\n    );\n\n    let preguntasFinales = [];\n\n    // Procesar las preguntas de la base de datos para incluir opciones\n    const preguntasDBProcesadas = await Promise.all(\n      preguntasDB.map(async (pregunta: any) => {\n        if (pregunta.tipo === 'opcion') {\n          const [opciones]: any = await pool.query(\n            'SELECT id, opcion, respuesta FROM respuestas_opciones WHERE id_pregunta = ?',\n            [pregunta.id]\n          );\n          return {\n            ...pregunta,\n            opciones: opciones.map((o: any) => ({\n              id: o.id,\n              texto: o.opcion,\n              esCorrecta: o.respuesta\n            }))\n          };\n        }\n        return pregunta;\n      })\n    );\n\n    preguntasFinales.push(...preguntasDBProcesadas); // Añade las preguntas de la DB a la lista final\n\n    // --- 2. Generar 3 preguntas adicionales usando IA ---\n    if (API_KEY) {\n      const materiaNombreCompleto: { [key: string]: string } = {\n        'bd': 'Base de Datos',\n        'web': 'Programación Web',\n        'so': 'Sistemas Operativos',\n      };\n      const nombreMateria = materiaNombreCompleto[materia] || materia;\n\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\",\n        safetySettings: [\n          { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },\n          { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_NONE },\n          { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },\n          { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_NONE },\n        ],\n      });\n\n      const prompt = `Genera 3 preguntas de opción múltiple relacionadas con el tema de \"${nombreMateria}\".\n      Cada pregunta debe tener un máximo de 4 opciones y solo una debe ser correcta.\n      Formatea la salida como un arreglo de objetos JSON. Cada objeto pregunta debe tener las siguientes propiedades:\n      id (un número secuencial único para el examen, no de la base de datos), materia (el nombre corto de la materia, ej. 'bd'),\n      tipo (\"opcion\"), pregunta (el enunciado de la pregunta), y opciones (un arreglo de objetos).\n      Cada objeto de opción debe tener: id (un número secuencial único para el examen), texto (el texto de la opción), y esCorrecta (1 si es correcta, 0 si no).\n      Asegúrate de que 'esCorrecta' sea 1 para solo una opción por pregunta.\n\n      Ejemplo de formato:\n      [\n        {\n          \"id\": 1001,\n          \"materia\": \"${materia}\",\n          \"tipo\": \"opcion\",\n          \"pregunta\": \"¿Cuál es un beneficio clave de usar bases de datos NoSQL?\",\n          \"opciones\": [\n            {\"id\": 2001, \"texto\": \"Consistencia estricta ACID\", \"esCorrecta\": 0},\n            {\"id\": 2002, \"texto\": \"Escalabilidad horizontal flexible\", \"esCorrecta\": 1},\n            {\"id\": 2003, \"texto\": \"Esquema relacional fijo\", \"esCorrecta\": 0}\n          ]\n        }\n      ]`;\n\n      try {\n        console.log('Intentando generar preguntas con IA para:', nombreMateria); // Log para ver si la solicitud se inicia\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const text = response.text();\n        console.log('Respuesta cruda de la IA:', text); // Log para ver la respuesta completa de la IA\n\n        let iaQuestions: any[] = [];\n        const jsonMatch = text.match(/```json\\n([\\s\\S]*?)\\n```/);\n        \n        if (jsonMatch && jsonMatch[1]) {\n            try {\n                iaQuestions = JSON.parse(jsonMatch[1]);\n                console.log('Preguntas de IA parseadas del bloque de código.');\n            } catch (parseError) {\n                console.error('Error al parsear JSON del bloque de código de IA:', parseError);\n            }\n        } else {\n            // Intenta parsear directamente si no hay bloque de código\n            try {\n                iaQuestions = JSON.parse(text);\n                console.log('Preguntas de IA parseadas directamente del texto.');\n            } catch (parseError) {\n                console.error('Error al parsear JSON directamente del texto de IA:', parseError);\n            }\n        }\n\n        // --- VALIDACIÓN ADICIONAL DE LA RESPUESTA DE LA IA ---\n        if (!Array.isArray(iaQuestions) || iaQuestions.length === 0) {\n            console.warn('La IA no devolvió un arreglo de preguntas válido o el arreglo está vacío.');\n            iaQuestions = []; // Asegura que sea un array vacío si no es válido\n        }\n\n        // Asignar IDs únicos a las preguntas generadas por IA\n        // Start ID from 10000 to minimize collision risk with existing DB IDs\n        let currentId = 10000; \n        iaQuestions.forEach((q: any) => {\n          q.id = currentId++;\n          q.materia = materia; // Ensure 'materia' uses the 'dbName'\n          if (q.opciones && Array.isArray(q.opciones)) {\n            q.opciones.forEach((opt: any) => {\n              opt.id = currentId++;\n            });\n          } else {\n            q.opciones = []; // Ensure options array exists\n            console.warn(`Pregunta de IA (ID ${q.id}) sin array de opciones válido.`);\n          }\n        });\n        \n        // Solo adjunta las preguntas de IA si el array no está vacío\n        if (iaQuestions.length > 0) {\n            preguntasFinales.push(...iaQuestions);\n            console.log(`Se adjuntaron ${iaQuestions.length} preguntas de IA.`);\n        } else {\n            console.log('No se adjuntaron preguntas de IA válidas.');\n        }\n\n      } catch (iaError: any) {\n        console.error('Error FATAL al generar preguntas con IA:', iaError.message);\n        // Aquí no relanzamos el error para que la aplicación aún devuelva las preguntas de la DB\n        // si la generación de IA falla, pero es importante loguearlo.\n      }\n    } else {\n      console.warn('GOOGLE_API_KEY no configurada. No se generarán preguntas con IA.');\n    }\n\n    if (preguntasFinales.length === 0) {\n      return NextResponse.json({ error: 'No se encontraron preguntas de la base de datos ni se pudieron generar con IA para esta materia' }, { status: 404 });\n    }\n\n    return NextResponse.json(preguntasFinales);\n\n  } catch (error: any) {\n    console.error('Error en la consulta o generación principal:', error);\n    return NextResponse.json(\n      { error: 'Error interno del servidor', details: error.message },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}